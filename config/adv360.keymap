#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        N1_PLUS: N1_PLUS {
            compatible = "zmk,behavior-mod-morph";
            label = "N1_PLUS";
            bindings = <&kp PLUS>, <&kp NUMBER_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        N2_BRACKET: N2_BRACKET {
            compatible = "zmk,behavior-mod-morph";
            label = "N2_BRACKET";
            bindings = <&kp LEFT_BRACKET>, <&kp NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        N3_BRACES: N3_BRACES {
            compatible = "zmk,behavior-mod-morph";
            label = "N3_BRACES";
            bindings = <&kp LEFT_BRACE>, <&kp NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        N4_PARENTH: N4_PARENTH {
            compatible = "zmk,behavior-mod-morph";
            label = "N4_PARENTH";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        N5_AMP: N5_AMP {
            compatible = "zmk,behavior-mod-morph";
            label = "N5_AMP";
            bindings = <&kp AMPS>, <&kp N5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        N6_EQUAL: N6_EQUAL {
            compatible = "zmk,behavior-mod-morph";
            label = "N6_EQUAL";
            bindings = <&kp EQUAL>, <&kp NUMBER_6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        N7_PARENTH: N7_PARENTH {
            compatible = "zmk,behavior-mod-morph";
            label = "N7_PARENTH";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp N7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        N8_BRACE: N8_BRACE {
            compatible = "zmk,behavior-mod-morph";
            label = "N8_BRACE";
            bindings = <&kp RIGHT_BRACE>, <&kp N8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        N9_BRACKET: N9_BRACKET {
            compatible = "zmk,behavior-mod-morph";
            label = "N9_BRACKET";
            bindings = <&kp RIGHT_BRACKET>, <&kp N9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        N0_Asterix: N0_Asterix {
            compatible = "zmk,behavior-mod-morph";
            label = "N0_ASTERIX";
            bindings = <&kp ASTERISK>, <&kp N0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        GRAVE_PIPE: GRAVE_PIPE {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_PIPE";
            bindings = <&kp PIPE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        BANG_PERCENT: BANG_PERCENT {
            compatible = "zmk,behavior-mod-morph";
            label = "BANG_PERCENT";
            bindings = <&kp EXCLAMATION>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        DOLLAR_TILDE: DOLLAR_TILDE {
            compatible = "zmk,behavior-mod-morph";
            label = "DOLLAR_TILDE";
            bindings = <&kp DOLLAR>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        BACKSLASH_POUND: BACKSLASH_POUND {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSLASH_POUND";
            bindings = <&kp BACKSLASH>, <&kp NON_US_HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        AT_CARET: AT_CARET {
            compatible = "zmk,behavior-mod-morph";
            label = "AT_CARET";
            bindings = <&kp AT_SIGN>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-mod-morph";
            label = "NEW_BEHAVIOR";
            bindings = <&kp AT_SIGN>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        CMD_X_TOG: cmd_x_tog {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &to 3>;
            label = "CMD_X_TOG";
        };

        CMD_Z_TOG: cmd_z_tog {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(Z) &to 3>;
            label = "CMD_Z_TOG";
        };

        CMD_V_TOG: cmd_v_tog {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(V) &to 3>;
            label = "CMD_V_TOG";
        };

        CMD_C_TOG: cmd_c_tog {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(C) &to 3>;
            label = "CMD_C_TOG";
        };

        CMD_K_TOG: cmd_k_tog {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(C) &to 3>;
            label = "CMD_K_TOG";
        };

        ALT_CMD_O_TOG: alt_cmd_o_tog {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(O)) &to 3>;
            label = "ALT_CMD_O_TOG";
        };

        CMD_T_TOG: cmd_t_tog {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(T) &to 3>;
            label = "CMD_T_TOG";
        };

        SHIFT_CMD_O_TOG: shift_cmd_o_tog {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(O)) &to 3>;
            label = "SHIFT_CMD_O_TOG";
        };

        ALT_CMD_LEFT_BRACKET_TOG: alt_cmd_bracket_tog {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LEFT_BRACKET)) &to 3>;
            label = "ALT_CMD_BRACKET_TOG";
        };

        ALT_CMD_RIGHT_BRACKET_TOG: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(RIGHT_BRACKET)) &to 3>;
            label = "NEW_MACRO";
        };

        CMD_K_CMD_D: cmd_k_cmd_d {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(K)>, <&macro_wait_time 50>, <&kp LG(D)>;

            label = "CMD_K_CMD_D";
        };

        CMD_K_SHIFT_CMD_D: cmd_k_shift_cmd_d {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(K)>, <&macro_wait_time 50>, <&kp LG(LS(D))>;

            label = "CMD_K_SHIFT_CMD_D";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&GRAVE_PIPE  &N1_PLUS       &N2_BRACKET  &N3_BRACES  &N4_PARENTH  &N5_AMP  &tog 1                                                   &mo 4            &N6_EQUAL  &N7_PARENTH  &N8_BRACE  &N9_BRACKET  &N0_Asterix  &BANG_PERCENT
&kp TAB      &kp SEMICOLON  &kp COMMA    &kp PERIOD  &kp P        &kp Y    &tog 3                                                   &kp PRINTSCREEN  &kp F      &kp G        &kp C      &kp R        &kp L        &BACKSLASH_POUND
&kp ESC      &kp A          &kp O        &kp E       &kp U        &kp I    &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &kp INSERT       &kp D      &kp H        &kp T      &kp N        &kp S        &kp MINUS
&kp LSHFT    &kp SQT        &kp Q        &kp J       &kp K        &kp X                         &kp HOME      &kp PG_UP                              &kp B      &kp M        &kp W      &kp V        &kp Z        &kp RSHFT
&mo 2        &DOLLAR_TILDE  &kp CAPS     &kp LEFT    &kp RIGHT             &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp SPACE                   &kp UP       &kp DOWN   &kp SLASH    &AT_CARET    &mo 2
            >;
        };

        keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                   &mo 4      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                    &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 2
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                      &mo 4   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        editor_shortcut {
            bindings = <
&none  &none           &none       &none               &none                   &none                    &none                                                       &none  &none                   &none             &none               &none                      &none                       &none
&none  &ALT_CMD_O_TOG  &CMD_T_TOG  &SHIFT_CMD_O_TOG    &none                   &none                    &trans                                                      &none  &none                   &CMD_K_CMD_D      &CMD_K_SHIFT_CMD_D  &kp LA(LG(L))              &none                       &none
&none  &CMD_K_TOG      &none       &none               &kp LA(LS(LEFT_ARROW))  &kp LS(LA(RIGHT_ARROW))  &none              &none           &none      &none  &none  &none  &none                   &none             &none               &kp LA(LG(S))              &none                       &none
&none  &CMD_Z_TOG      &CMD_X_TOG  &CMD_C_TOG          &CMD_V_TOG              &none                                                       &none      &none                &kp LA(LS(DOWN_ARROW))  &kp LS(LG(M))     &none               &none                      &none                       &none
&none  &none           &none       &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)                              &kp LA(BACKSPACE)  &kp LA(DELETE)  &none      &none  &none  &none                          &kp LG(UP_ARROW)  &kp LG(DOWN_ARROW)  &ALT_CMD_LEFT_BRACKET_TOG  &ALT_CMD_RIGHT_BRACKET_TOG  &none
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
